{"version":3,"sources":["webpack:///./src/components/UserInfo/UserInfo.jsx","webpack:///./src/components/Disqus/Disqus.jsx","webpack:///./src/components/PostTags/PostTags.jsx","webpack:///./src/components/SocialLinks/SocialLinks.jsx","webpack:///./src/templates/post.jsx","webpack:///./data/SiteConfig.js","webpack:///./src/layout/index.jsx","webpack:///./src/components/SEO/SEO.jsx"],"names":["UserInfo","render","userTwitter","this","props","config","expanded","react_default","a","createElement","dist","username","options","count","Component","Disqus","_this","_Component","call","state","toasts","notifyAboutComment","bind","assertThisInitialized_default","onSnackbarDismiss","slice","setState","push","text","postNode","disqusShortname","post","frontmatter","url","urljoin","siteUrl","pathPrefix","fields","slug","main_default","shortname","identifier","title","category_id","onNewComment","PostTags","tags","className","map","tag","gatsby_browser_entry","key","style","textDecoration","to","kebabCase_default","SocialLinks","_this$props","postPath","mobile","iconSize","renderShareCount","filter","RedditShareButton","RedditIcon","round","size","RedditShareCount","TwitterShareButton","TwitterIcon","GooglePlusShareButton","GooglePlusIcon","GooglePlusShareCount","FacebookShareButton","quote","excerpt","FacebookIcon","FacebookShareCount","LinkedinShareButton","description","LinkedinIcon","LinkedinShareCount","TelegramShareButton","TelegramIcon","PostTemplate","pageContext","data","markdownRemark","id","postDefaultCategoryID","layout","Helmet_default","siteTitle","SEO","postSEO","src","cover","dangerouslySetInnerHTML","__html","html","components_PostTags_PostTags","components_SocialLinks_SocialLinks","components_UserInfo_UserInfo","components_Disqus_Disqus","React","pageQuery","module","exports","siteTitleShort","siteTitleAlt","siteLogo","siteDescription","siteRss","siteFBAppID","googleAnalyticsID","dateFromFormat","dateFormat","userName","userLocation","userAvatar","userDescription","userLinks","label","iconClassName","copyright","themeColor","backgroundColor","MainLayout","children","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","name","content","image","postURL","postMeta","blogURL","schemaOrgJSONLD","@context","@type","alternateName","itemListElement","position","item","@id","headline","type","JSON","stringify","property"],"mappings":"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","file":"component---src-templates-post-jsx-7faddc505b7349af9b7c.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Follow } from \"react-twitter-widgets\";\n\nclass UserInfo extends Component {\n  render() {\n    const { userTwitter } = this.props.config;\n    const { expanded } = this.props;\n    return (\n      <Follow\n        username={userTwitter}\n        options={{ count: expanded ? true : \"none\" }}\n      />\n    );\n  }\n}\n\nexport default UserInfo;\n","import React, { Component } from \"react\";\nimport ReactDisqusComments from \"react-disqus-comments\";\nimport urljoin from \"url-join\";\nimport config from \"../../../data/SiteConfig\";\n\nclass Disqus extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      toasts: []\n    };\n    this.notifyAboutComment = this.notifyAboutComment.bind(this);\n    this.onSnackbarDismiss = this.onSnackbarDismiss.bind(this);\n  }\n\n  onSnackbarDismiss() {\n    const [, ...toasts] = this.state.toasts;\n    this.setState({ toasts });\n  }\n  notifyAboutComment() {\n    const toasts = this.state.toasts.slice();\n    toasts.push({ text: \"New comment available!\" });\n    this.setState({ toasts });\n  }\n  render() {\n    const { postNode } = this.props;\n    if (!config.disqusShortname) {\n      return null;\n    }\n    const post = postNode.frontmatter;\n    const url = urljoin(\n      config.siteUrl,\n      config.pathPrefix,\n      postNode.fields.slug\n    );\n    return (\n      <ReactDisqusComments\n        shortname={config.disqusShortname}\n        identifier={post.title}\n        title={post.title}\n        url={url}\n        category_id={post.category_id}\n        onNewComment={this.notifyAboutComment}\n      />\n    );\n  }\n}\n\nexport default Disqus;\n","import React, { Component } from \"react\";\nimport _ from \"lodash\";\nimport { Link } from \"gatsby\";\n\nclass PostTags extends Component {\n  render() {\n    const { tags } = this.props;\n    return (\n      <div className=\"post-tag-container\">\n        {tags &&\n          tags.map(tag => (\n            <Link\n              key={tag}\n              style={{ textDecoration: \"none\" }}\n              to={`/tags/${_.kebabCase(tag)}`}\n            >\n              <button>{tag}</button>\n            </Link>\n          ))}\n      </div>\n    );\n  }\n}\n\nexport default PostTags;\n","import React, { Component } from \"react\";\nimport {\n  FacebookShareButton,\n  GooglePlusShareButton,\n  LinkedinShareButton,\n  TwitterShareButton,\n  TelegramShareButton,\n  RedditShareButton,\n  FacebookShareCount,\n  GooglePlusShareCount,\n  LinkedinShareCount,\n  RedditShareCount,\n  FacebookIcon,\n  TwitterIcon,\n  TelegramIcon,\n  GooglePlusIcon,\n  LinkedinIcon,\n  RedditIcon\n} from \"react-share\";\nimport urljoin from \"url-join\";\nimport config from \"../../../data/SiteConfig\";\nimport \"./SocialLinks.css\";\n\nclass SocialLinks extends Component {\n  render() {\n    const { postNode, postPath, mobile } = this.props;\n    const post = postNode.frontmatter;\n    const url = urljoin(config.siteUrl, config.pathPrefix, postPath);\n    const iconSize = mobile ? 36 : 48;\n    const filter = count => (count > 0 ? count : \"\");\n    const renderShareCount = count => (\n      <div className=\"share-count\">{filter(count)}</div>\n    );\n\n    return (\n      <div className=\"social-links\">\n        <RedditShareButton url={url} title={post.title}>\n          <RedditIcon round size={iconSize} />\n          <RedditShareCount url={url}>\n            {count => renderShareCount(count)}\n          </RedditShareCount>\n        </RedditShareButton>\n        <TwitterShareButton url={url} title={post.title}>\n          <TwitterIcon round size={iconSize} />\n        </TwitterShareButton>\n        <GooglePlusShareButton url={url}>\n          <GooglePlusIcon round size={iconSize} />\n          <GooglePlusShareCount url={url}>\n            {count => renderShareCount(count)}\n          </GooglePlusShareCount>\n        </GooglePlusShareButton>\n        <FacebookShareButton url={url} quote={postNode.excerpt}>\n          <FacebookIcon round size={iconSize} />\n          <FacebookShareCount url={url}>\n            {count => renderShareCount(count)}\n          </FacebookShareCount>\n        </FacebookShareButton>\n        <LinkedinShareButton\n          url={url}\n          title={post.title}\n          description={postNode.excerpt}\n        >\n          <LinkedinIcon round size={iconSize} />\n          <LinkedinShareCount url={url}>\n            {count => renderShareCount(count)}\n          </LinkedinShareCount>\n        </LinkedinShareButton>\n        <TelegramShareButton url={url}>\n          <TelegramIcon round size={iconSize} />\n        </TelegramShareButton>\n      </div>\n    );\n  }\n}\n\nexport default SocialLinks;\n","import React from \"react\";\nimport Helmet from \"react-helmet\";\nimport { graphql } from \"gatsby\";\nimport Layout from \"../layout\";\nimport UserInfo from \"../components/UserInfo/UserInfo\";\nimport Disqus from \"../components/Disqus/Disqus\";\nimport PostTags from \"../components/PostTags/PostTags\";\nimport SocialLinks from \"../components/SocialLinks/SocialLinks\";\nimport SEO from \"../components/SEO/SEO\";\nimport config from \"../../data/SiteConfig\";\nimport \"./b16-tomorrow-dark.css\";\nimport \"./post.css\";\n\nexport default class PostTemplate extends React.Component {\n  render() {\n    const { slug } = this.props.pageContext;\n    const postNode = this.props.data.markdownRemark;\n    const post = postNode.frontmatter;\n    if (!post.id) {\n      post.id = slug;\n    }\n    if (!post.category_id) {\n      post.category_id = config.postDefaultCategoryID;\n    }\n    return (\n      <Layout>\n        <div>\n          <Helmet>\n            <title>{`${post.title} | ${config.siteTitle}`}</title>\n          </Helmet>\n          <SEO postPath={slug} postNode={postNode} postSEO />\n          <div>\n            <img src={post.cover} />\n            <h1>{post.title}</h1>\n            <div dangerouslySetInnerHTML={{ __html: postNode.html }} />\n            <div className=\"post-meta\">\n              <PostTags tags={post.tags} />\n              <SocialLinks postPath={slug} postNode={postNode} />\n            </div>\n            <UserInfo config={config} />\n            <Disqus postNode={postNode} />\n          </div>\n        </div>\n      </Layout>\n    );\n  }\n}\n\n/* eslint no-undef: \"off\" */\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      timeToRead\n      excerpt\n      frontmatter {\n        title\n        cover\n        date\n        category\n        tags\n      }\n      fields {\n        nextTitle\n        nextSlug\n        prevTitle\n        prevSlug\n        slug\n        date\n      }\n    }\n  }\n`;\n","module.exports = {\n  siteTitle: \"Jared Cuffe's Echo Chamber\", // Site title.\n  siteTitleShort: \"Echo Chamber\", // Short site title for homescreen (PWA). Preferably should be under 12 characters to prevent truncation.\n  siteTitleAlt: \"Jared's Dev Blog\", // Alternative site title for SEO.\n  siteLogo: \"/logos/perseus.png\", // Logo used for SEO and manifest.\n  siteUrl: \"https://jcuffe.github.io\", // Domain of your website without pathPrefix.\n  pathPrefix: \"/\", // Prefixes all links. For cases when deployed to example.github.io/gatsby-advanced-starter/.\n  siteDescription: \"A GatsbyJS stater with Advanced design in mind.\", // Website description used for RSS feeds/meta description tag.\n  siteRss: \"/rss.xml\", // Path to the RSS file.\n  siteFBAppID: \"1825356251115265\", // FB Application ID for using app insights\n  googleAnalyticsID: \"UA-47311644-5\", // GA tracking ID.\n  disqusShortname: \"jared-cuffe-echo-chamber\", // Disqus shortname.\n  postDefaultCategoryID: \"Tech\", // Default category for posts.\n  dateFromFormat: \"YYYY-MM-DD\", // Date format used in the frontmatter.\n  dateFormat: \"DD/MM/YYYY\", // Date format for display.\n  userName: \"Jared Cuffe\", // Username to display in the author segment.\n  userTwitter: \"\", // Optionally renders \"Follow Me\" in the UserInfo segment.\n  userLocation: \"North Pole, Earth\", // User location to display in the author segment.\n  userAvatar: \"https://api.adorable.io/avatars/150/test.png\", // User avatar to display in the author segment.\n  userDescription:\n    \"Yeah, I like animals better than people sometimes... Especially dogs. Dogs are the best. Every time you come home, they act like they haven't seen you in a year. And the good thing about dogs... is they got different dogs for different people.\", // User description to display in the author segment.\n  // Links to social profiles/projects you want to display in the author segment/navigation bar.\n  userLinks: [\n    {\n      label: \"GitHub\",\n      url: \"https://github.com/Vagr9K/gatsby-advanced-starter\",\n      iconClassName: \"fa fa-github\"\n    },\n    {\n      label: \"Twitter\",\n      url: \"https://twitter.com/Vagr9K\",\n      iconClassName: \"fa fa-twitter\"\n    },\n    {\n      label: \"Email\",\n      url: \"mailto:vagr9k@gmail.com\",\n      iconClassName: \"fa fa-envelope\"\n    }\n  ],\n  copyright: \"Copyright © 2017. Advanced User\", // Copyright string for the footer of the website and RSS feed.\n  themeColor: \"#c62828\", // Used for setting manifest and progress theme colors.\n  backgroundColor: \"#e0e0e0\" // Used for setting manifest background color.\n};\n","import React from \"react\";\nimport Helmet from \"react-helmet\";\nimport config from \"../../data/SiteConfig\";\nimport \"./index.css\";\n\nexport default class MainLayout extends React.Component {\n  render() {\n    const { children } = this.props;\n    return (\n      <div>\n        <Helmet>\n          <meta name=\"description\" content={config.siteDescription} />\n        </Helmet>\n        {children}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Helmet from \"react-helmet\";\nimport urljoin from \"url-join\";\nimport config from \"../../../data/SiteConfig\";\n\nclass SEO extends Component {\n  render() {\n    const { postNode, postPath, postSEO } = this.props;\n    let title;\n    let description;\n    let image;\n    let postURL;\n    if (postSEO) {\n      const postMeta = postNode.frontmatter;\n      ({ title } = postMeta);\n      description = postMeta.description\n        ? postMeta.description\n        : postNode.excerpt;\n      image = postMeta.cover;\n      postURL = urljoin(config.siteUrl, config.pathPrefix, postPath);\n    } else {\n      title = config.siteTitle;\n      description = config.siteDescription;\n      image = config.siteLogo;\n    }\n\n    image = urljoin(config.siteUrl, config.pathPrefix, image);\n    const blogURL = urljoin(config.siteUrl, config.pathPrefix);\n    const schemaOrgJSONLD = [\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"WebSite\",\n        url: blogURL,\n        name: title,\n        alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\"\n      }\n    ];\n    if (postSEO) {\n      schemaOrgJSONLD.push(\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          itemListElement: [\n            {\n              \"@type\": \"ListItem\",\n              position: 1,\n              item: {\n                \"@id\": postURL,\n                name: title,\n                image\n              }\n            }\n          ]\n        },\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BlogPosting\",\n          url: blogURL,\n          name: title,\n          alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\",\n          headline: title,\n          image: {\n            \"@type\": \"ImageObject\",\n            url: image\n          },\n          description\n        }\n      );\n    }\n    return (\n      <Helmet>\n        {/* General tags */}\n        <meta name=\"description\" content={description} />\n        <meta name=\"image\" content={image} />\n\n        {/* Schema.org tags */}\n        <script type=\"application/ld+json\">\n          {JSON.stringify(schemaOrgJSONLD)}\n        </script>\n\n        {/* OpenGraph tags */}\n        <meta property=\"og:url\" content={postSEO ? postURL : blogURL} />\n        {postSEO ? <meta property=\"og:type\" content=\"article\" /> : null}\n        <meta property=\"og:title\" content={title} />\n        <meta property=\"og:description\" content={description} />\n        <meta property=\"og:image\" content={image} />\n        <meta\n          property=\"fb:app_id\"\n          content={config.siteFBAppID ? config.siteFBAppID : \"\"}\n        />\n\n        {/* Twitter Card tags */}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta\n          name=\"twitter:creator\"\n          content={config.userTwitter ? config.userTwitter : \"\"}\n        />\n        <meta name=\"twitter:title\" content={title} />\n        <meta name=\"twitter:description\" content={description} />\n        <meta name=\"twitter:image\" content={image} />\n      </Helmet>\n    );\n  }\n}\n\nexport default SEO;\n"],"sourceRoot":""}